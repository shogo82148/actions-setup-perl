name: build on linux

on:
  pull_request:
    paths:
      - "versions/linux.json"
      - "scripts/linux/**"
      - "scripts/lib/Devel/**"
      - ".github/workflows/linux.yml"
  push:
    branches:
      - "releases/*"
  schedule:
    - cron: "15 6 * * 5"
  workflow_dispatch:
    inputs:
      perl-versions:
        description: perl versions to build (JSON Array)
        required: false
        default: ""

jobs:
  list:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        name: list available perl versions
        run: |
          if [ -n "$PERL_VERSIONS" ]; then
            echo "::set-output name=matrix::$(printenv PERL_VERSIONS | jq -c '{perl: .}')"
          else
            echo "::set-output name=matrix::$(cat versions/linux.json | jq -c '{perl: .}')"
          fi
        env:
          PERL_VERSIONS: ${{ github.event.inputs.perl-versions }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  build:
    runs-on: ubuntu-18.04
    needs: list
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.list.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Host perl -V
        run: perl -V
      - name: gcc --version
        run: gcc --version

      - uses: actions/cache@v2
        with:
          path: scripts/linux/local
          key: ${{ runner.os }}-build-${{ hashFiles('scripts/linux/cpanfile.snapshot') }}
      - name: carton install --deployment
        shell: bash
        run: ../../bin/carton install --deployment
        working-directory: ./scripts/linux

      - name: build
        shell: bash
        run: perl build.pl
        env:
          PERL5LIB: ${{ github.workspace }}/scripts/linux/local/lib/perl5
          PERL_VERSION: ${{ matrix.perl }}
        working-directory: ./scripts/linux

      - name: upload
        if: startsWith(github.ref, 'refs/heads/releases/')
        run: |
          ACTIONS_VERSION=v$(cat "$GITHUB_WORKSPACE/package.json" | jq -r .version)
          aws --region us-east-1 s3 cp --acl public-read "$RUNNER_TEMP/perl.tar.xz" "s3://shogo82148-actions-setup-perl/$ACTIONS_VERSION/perl-$PERL_VERSION-linux-x64.tar.xz"
        env:
          PERL_VERSION: ${{ matrix.perl }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-multi-thread:
    runs-on: ubuntu-18.04
    needs: list
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.list.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Host perl -V
        run: perl -V
      - name: gcc --version
        run: gcc --version

      - uses: actions/cache@v2
        with:
          path: scripts/linux/local
          key: ${{ runner.os }}-build-${{ hashFiles('scripts/linux/cpanfile.snapshot') }}
      - name: carton install --deployment
        shell: bash
        run: ../../bin/carton install --deployment
        working-directory: ./scripts/linux

      - name: build
        shell: bash
        run: perl build.pl
        env:
          PERL5LIB: ${{ github.workspace }}/scripts/linux/local/lib/perl5
          PERL_VERSION: ${{ matrix.perl }}
          PERL_MULTI_THREAD: "1"
        working-directory: ./scripts/linux

      - name: upload
        if: startsWith(github.ref, 'refs/heads/releases/')
        run: |
          ACTIONS_VERSION=v$(cat "$GITHUB_WORKSPACE/package.json" | jq -r .version)
          aws --region us-east-1 s3 cp --acl public-read "$RUNNER_TEMP/perl.tar.xz" "s3://shogo82148-actions-setup-perl/$ACTIONS_VERSION/perl-$PERL_VERSION-linux-x64-multi-thread.tar.xz"
        env:
          PERL_VERSION: ${{ matrix.perl }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
